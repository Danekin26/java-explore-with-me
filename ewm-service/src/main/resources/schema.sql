DROP TABLE IF EXISTS categories CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS events CASCADE;
DROP TABLE IF EXISTS locations CASCADE;
DROP TABLE IF EXISTS participation_request CASCADE;
DROP TABLE IF EXISTS compilations CASCADE;
DROP TABLE IF EXISTS compilation_event CASCADE;
DROP TABLE IF EXISTS comments CASCADE;


CREATE TABLE categories
(
    id_categories   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name_categories VARCHAR NOT NULL UNIQUE,
    CHECK ( LENGTH(name_categories) >= 1 AND LENGTH(name_categories) <= 50 )

);

CREATE TABLE users
(
    id_user BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email   VARCHAR NOT NULL,
    name    VARCHAR NOT NULL,

    CHECK ( LENGTH(email) >= 6 AND LENGTH(email) <= 254 ),
    CHECK ( LENGTH(name) >= 2 AND LENGTH(name) <= 250 )

);

CREATE TABLE locations
(
    id_location BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    lat         FLOAT,
    lon         FLOAT
);

CREATE TABLE events
(
    id_events          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    annotation         VARCHAR                                                        NOT NULL,
    id_category        BIGINT REFERENCES categories (id_categories) ON DELETE CASCADE NOT NULL,
    confirmed_requests BIGINT,
    created_on         TIMESTAMP,
    description        VARCHAR                                                        NOT NULL,
    event_date         TIMESTAMP                                                      NOT NULL,
    id_initiator       BIGINT REFERENCES users (id_user) ON DELETE CASCADE            NOT NULL,
    id_location        BIGINT REFERENCES locations (id_location) ON DELETE CASCADE,
    paid               BOOLEAN,
    participant_limit  BIGINT,
    published_on       TIMESTAMP,
    state              VARCHAR,
    request_moderation BOOLEAN,
    views              BIGINT,
    title              VARCHAR,

    CHECK ( LENGTH(annotation) >= 20 AND LENGTH(annotation) <= 2000 ),
    CHECK ( LENGTH(description) >= 20 AND LENGTH(description) <= 7000 ),
    CHECK ( LENGTH(title) >= 3 AND LENGTH(title) <= 120 )
);



CREATE TABLE compilations
(
    id_compilation BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pinned         BOOLEAN,
    title          varchar NOT NULL UNIQUE
);

CREATE TABLE compilation_event
(
    compilation_id BIGINT REFERENCES compilations (id_compilation),
    event_id       BIGINT REFERENCES events (id_events),
    PRIMARY KEY (compilation_id, event_id)
);

CREATE TABLE participation_request
(
    id_request   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created      TIMESTAMP,
    id_event     BIGINT REFERENCES events (id_events) ON DELETE CASCADE NOT NULL,
    id_requester BIGINT REFERENCES users (id_user) ON DELETE CASCADE    NOT NULL,
    status       varchar                                                NOT NULL
);

CREATE TABLE comments
(
    id_comment     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_event       BIGINT REFERENCES events (id_events) ON DELETE CASCADE NOT NULL,
    id_commentator BIGINT REFERENCES users (id_user) ON DELETE CASCADE    NOT NULL,
    created        TIMESTAMP,
    comment        varchar                                                NOT NULL,
    CHECK ( LENGTH(comment) >= 1 AND LENGTH(comment) <= 4000 )
);